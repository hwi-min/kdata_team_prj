import streamlit as st
from PIL import Image
import pytesseract

# 메뉴판을 불러온 후 원하는 음식 선택
def main():
    # Streamlit 앱의 레이아웃 및 설정을 변경
    st.set_page_config(page_title="YumScan", page_icon=":pizza:", layout="wide")

    st.title("Choose the food you want to get information")
    st.markdown("<p style='font-size: 25px;'>1.pizza</p>", unsafe_allow_html=True)
    st.markdown("<p style='font-size: 25px;'>2.pasta</p>", unsafe_allow_html=True)
    st.markdown("<p style='font-size: 25px;'>3.coke</p>", unsafe_allow_html=True)

# 음식에 들어있는 재료에 대한 사진과 설명 
    st.markdown("<hr>", unsafe_allow_html=True)
    st.title("Ingredients")
    st.markdown("<p style='font-size: 20px;'>The ingredients in this food are as follows.</p>", unsafe_allow_html=True)
    st.write(" ")

    cols = st.columns(3)

    # 첫 번째 재료 정보 (이미지와 설명)
    with cols[0]:
        st.image("vegetable.png", use_column_width=True)
        st.write("첫 번째 재료 설명")
    
    # 두 번째 재료 정보 (이미지와 설명)
    with cols[1]:
        st.image("vegetable.png", use_column_width=True)
        st.write("두 번째 재료 설명")

    # 세 번째 재료 정보 (이미지와 설명)
    with cols[2]:
        st.image("vegetable.png", use_column_width=True)
        st.write("세 번째 재료 설명")


# 음식이 유발할 수 있는 알러지에 대한 사진과 설명

    st.title("Allergies")
    st.markdown("<p style='font-size: 20px;'>This food can cause the following allergies.</p>", unsafe_allow_html=True)
    st.write(" ")
    st.write(" ")

    # 알러지에 대한 사진과 설명
    allergy_data = {
        "image": "vegetable.png",
        "description": "알러지에 대한 설명입니다."
    }

    cols = st.columns(2)

    with cols[0]:
        st.image(allergy_data["image"], width=200)

    with cols[1]:
        st.write(allergy_data["description"])

if __name__ == "__main__":
    main()

# Spicy-level (NULL 수정완료)
st.title("음식의 맵기 단계")

# 각 음식의 기본 맵기 단계 설정
spiciness_levels = {
    "파스타": 1,
    "피자": 2,
    "치킨": 3,
    "콜라": 0,
    "치즈": None
}

# 음식 목록 생성
foods = list(spiciness_levels.keys())

# 음식 선택
selected_food = st.selectbox("음식 선택", foods)

# null 값을 선택한 경우
if selected_food == "치즈":
    is_null = st.write("UNKNOWN")
    if is_null:
        spicy_level = None
    else:
        # "치즈"인 경우 슬라이더바를 비활성화하고 불투명하게 표시
        with st.empty():
            spicy_level = None
else:
    spicy_level = st.slider("맵기 단계", min_value=0, max_value=3, value=spiciness_levels[selected_food], step=1, format="🌶️ %d")

# 선택된 맵기 단계와 null 여부에 따라 결과 출력
if spicy_level is None:
    st.write(f"{selected_food}의 맵기 단계: Null")
else:
    st.write(f"{selected_food}의 맵기 단계:", spicy_level)


# 환율 정보 (실시간 환율 정보를 사용)
import requests

def get_exchange_rates(api_key):
    url = f"https://api.currencyfreaks.com/latest?apikey=21a31a1e5b4346b3877828cea5953658"
    headers = {
        "apikey": api_key
    }
    response = requests.get(url, headers=headers)
    data = response.json()
    return data["rates"]

base_currency = "USD"  # 기준 화폐
target_currencies = ["USD", "JPY", "CNY", "TWD"]  # 대상 화폐들
api_key = "21a31a1e5b4346b3877828cea5953658"  # currencyfreaks에서 발급받은 API 키를 입력

exchange_rates = get_exchange_rates(api_key)

# 환율 정보를 확인
print(exchange_rates)

krw_exchange_rate = exchange_rates.get("KRW")
jpy_exchange_rate = exchange_rates.get("JPY")
cny_exchange_rate = exchange_rates.get("CNY")
twd_exchange_rate = exchange_rates.get("TWD")

exchange = {
    "KRW": krw_exchange_rate,  
    "JPY": jpy_exchange_rate,   
    "CNY": cny_exchange_rate,   
    "TWD": twd_exchange_rate    
}

# 가로선 추가
st.markdown("<hr>", unsafe_allow_html=True)

st.title("Today's Exchange Rate")

BASE_currency = "KRW"
krw_exchange_rate = float(krw_exchange_rate)
jpy_exchange_rate = float(jpy_exchange_rate)
cny_exchange_rate = float(cny_exchange_rate)
twd_exchange_rate = float(twd_exchange_rate)

usd_exchange_rate = exchange_rates.get("USD")
usd_exchange_rate = float(usd_exchange_rate)
USD_currency = usd_exchange_rate/krw_exchange_rate

if USD_currency is not None:
    USD_currency = float(USD_currency)
      # 문자열을 실수형으로 변환
    st.write(f"1 {BASE_currency} = {USD_currency:.4f} USD")
else:
    st.write("USD의 환율 정보가 없습니다.")

JPY_currency = jpy_exchange_rate/krw_exchange_rate

if JPY_currency is not None:
    JPY_currency = float(JPY_currency)
      # 문자열을 실수형으로 변환
    st.write(f"1 {BASE_currency} = {JPY_currency:.4f} JPY")
else:
    st.write("JPY의 환율 정보가 없습니다.")

CNY_currency = cny_exchange_rate/krw_exchange_rate

if CNY_currency is not None:
    CNY_currency = float(CNY_currency)
      # 문자열을 실수형으로 변환
    st.write(f"1 {BASE_currency} = {CNY_currency:.4f} CNY")
else:
    st.write("CNY의 환율 정보가 없습니다.")

TWD_currency = twd_exchange_rate/krw_exchange_rate

if TWD_currency is not None:
    TWD_currency = float(TWD_currency)
      # 문자열을 실수형으로 변환
    st.write(f"1 {BASE_currency} = {TWD_currency:.4f} TWD")
else:
    st.write("TWD의 환율 정보가 없습니다.")

# 가로선 추가
st.markdown("<hr>", unsafe_allow_html=True)

st.title("Price info - 실시간 환율 정보 사용 (KRW 기준)")

EXCHANGE = {
    "USD": USD_currency,  
    "JPY": JPY_currency,   
    "CNY": CNY_currency,   
    "TWD": TWD_currency   
}

BASE_currency = "KRW"
target_currencies = ["USD", "JPY", "CNY", "TWD"]

st.write("BASE_currency:", BASE_currency)
BASE = st.number_input("enter price", key="BASE", min_value=0.01)

st.write("choose target_currencies:")
TARGET = st.selectbox("select currency", target_currencies, key="TARGET")

converted_amount = BASE * EXCHANGE[TARGET]
st.write(f"{BASE:.2f} {BASE_currency} = {converted_amount:.2f} {TARGET}")
