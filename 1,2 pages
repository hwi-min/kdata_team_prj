import streamlit as st
import requests
import time

def home_page():
    logo_text = "YUMSCAN"
    logo_html = f"""
    <div style="position: absolute; top: -50px; right: -150px;">
        <h1 style="font-size: 24px;">{logo_text}</h1>
    </div>
    """
    st.markdown(logo_html, unsafe_allow_html=True)

    st.title('K-FOOD : From Seoul to your soul.')

    st.markdown("<style>h1{margin-bottom: 10px;}</style>", unsafe_allow_html=True)

    if "photo" not in st.session_state:
        st.session_state["photo"] = "not done"

    col1, col2 = st.columns([5, 3])

    def change_photo_state():
        st.session_state["photo"] = "done"

    uploaded_photo = col1.file_uploader("Upload a photo", on_change=change_photo_state)
    camera_photo = col1.camera_input("Take a photo", on_change=change_photo_state)

    if st.session_state["photo"] == "done":
        progress_bar = col1.progress(0)

        for perc_completed in range(100):
            time.sleep(0.05)
            progress_bar.progress(perc_completed + 1)

        col1.success("Photo uploaded successfully!")

    if st.session_state["photo"] == "done" and col1.button("Submit"):
        with st.expander("Preview"):
            st.write("Please double-check that you have submitted all desired photo")

            if uploaded_photo is None:
                st.image(camera_photo)
            else:
                st.image(uploaded_photo)

    col2.markdown("""
        <div style="border: 1px solid black; padding: 10px;">
            <h2>Instructions</h2>
            <p>Welcome to K-FOOD's YUMSCAN!</p>
            <p>1. Use the dropdown to select your preferred language.</p>
            <p>2. You can either upload a photo by clicking 'Upload a photo' or take a photo using the 'Take a photo' button.</p>
            <p>3. Click the 'Submit' button after uploading or taking a photo to view the preview.</p>
            <p>4. Double-check your photo in the preview section before submitting.</p>
            <p>5. Enjoy the app and discover the delicious world of K-FOOD!</p>
        </div>
    """, unsafe_allow_html=True)

def food_info_page():
    st.title("Choose the food you want to get information")
    st.markdown("<p style='font-size: 25px;'>1.pizza</p>", unsafe_allow_html=True)
    st.markdown("<p style='font-size: 25px;'>2.pasta</p>", unsafe_allow_html=True)
    st.markdown("<p style='font-size: 25px;'>3.coke</p>", unsafe_allow_html=True)

def Ingredients():
# 음식에 들어있는 재료에 대한 사진과 설명 
    st.title("Ingredients")
    st.markdown("<p style='font-size: 20px;'>The ingredients in this food are as follows.</p>", unsafe_allow_html=True)
    st.write(" ")

    cols = st.columns(3)

    # 첫 번째 재료 정보 (이미지와 설명)
    with cols[0]:
        st.image("vegetable.png", use_column_width=True)
        st.write("첫 번째 재료 설명")
    
    # 두 번째 재료 정보 (이미지와 설명)
    with cols[1]:
        st.image("vegetable.png", use_column_width=True)
        st.write("두 번째 재료 설명")

    # 세 번째 재료 정보 (이미지와 설명)
    with cols[2]:
        st.image("vegetable.png", use_column_width=True)
        st.write("세 번째 재료 설명")


def allergen_page():
    st.title("Allergen Information")
    st.markdown("<p style='font-size: 20px;'>This food can cause the following allergies.</p>", unsafe_allow_html=True)
    st.write(" ")
    st.write(" ")

    # 알러지에 대한 사진과 설명
    allergy_data = {
        "image": "vegetable.png",
        "description": "알러지에 대한 설명입니다."
    }

    cols = st.columns(2)

    with cols[0]:
        st.image(allergy_data["image"], width=200)

    with cols[1]:
        st.write(allergy_data["description"])

def spiciness_page():
    st.title("Spiciness Level")
    st.title("음식의 맵기 단계")

# 각 음식의 기본 맵기 단계 설정
    spiciness_levels = {
        "파스타": 1,
        "피자": 2,
        "치킨": 3,
        "콜라": 0,
        "치즈": None
    }

    # 음식 목록 생성
    foods = list(spiciness_levels.keys())

    # 음식 선택
    selected_food = st.selectbox("음식 선택", foods)

    # null 값을 선택한 경우
    if selected_food == "치즈":
        is_null = st.write("UNKNOWN")
        if is_null:
            spicy_level = None
        else:
        # "치즈"인 경우 슬라이더바를 비활성화하고 불투명하게 표시
            with st.empty():
                spicy_level = None
    else:
        spicy_level = st.slider("맵기 단계", min_value=0, max_value=3, value=spiciness_levels[selected_food], step=1, format="🌶️ %d")

    # 선택된 맵기 단계와 null 여부에 따라 결과 출력
    if spicy_level is None:
        st.write(f"{selected_food}의 맵기 단계: Null")
    else:
        st.write(f"{selected_food}의 맵기 단계:", spicy_level)


def exchange_rate_page():
    st.title("Exchange Rates")
    def get_exchange_rates(api_key):
        url = f"https://api.currencyfreaks.com/latest?apikey=21a31a1e5b4346b3877828cea5953658"
        headers = {
            "apikey": api_key
        }
        response = requests.get(url, headers=headers)
        data = response.json()
        return data["rates"]

    base_currency = "USD"  # 기준 화폐
    target_currencies = ["USD", "JPY", "CNY", "TWD"]  # 대상 화폐들
    api_key = "21a31a1e5b4346b3877828cea5953658"  # currencyfreaks에서 발급받은 API 키를 입력

    exchange_rates = get_exchange_rates(api_key)

    # 환율 정보를 확인
    print(exchange_rates)

    st.title("Today's Exchange Rate")


    krw_exchange_rate = exchange_rates.get("KRW")

    if krw_exchange_rate is not None:
        krw_exchange_rate = float(krw_exchange_rate)  # 문자열을 실수형으로 변환
        st.write(f"1 {base_currency} = {krw_exchange_rate:.4f} KRW")
    else:
        st.write("KRW의 환율 정보가 없습니다.")

    jpy_exchange_rate = exchange_rates.get("JPY")

    if jpy_exchange_rate is not None:
        jpy_exchange_rate = float(jpy_exchange_rate)  # 문자열을 실수형으로 변환
        st.write(f"1 {base_currency} = {jpy_exchange_rate:.4f} JPY")
    else:
        st.write("jpy의 환율 정보가 없습니다.")

    cny_exchange_rate = exchange_rates.get("CNY")

    if cny_exchange_rate is not None:
        cny_exchange_rate = float(cny_exchange_rate)  # 문자열을 실수형으로 변환
        st.write(f"1 {base_currency} = {cny_exchange_rate:.4f} CNY")
    else:
        st.write("cny의 환율 정보가 없습니다.")

    twd_exchange_rate = exchange_rates.get("TWD")

    if twd_exchange_rate is not None:
        twd_exchange_rate = float(twd_exchange_rate)  # 문자열을 실수형으로 변환
        st.write(f"1 {base_currency} = {twd_exchange_rate:.4f} TWD")
    else:
        st.write("twd의 환율 정보가 없습니다.")


    st.title("Price info - 실시간 환율 정보 사용 (USD 기준)")

    exchange = {
        "KRW": krw_exchange_rate,  
        "JPY": jpy_exchange_rate,   
        "CNY": cny_exchange_rate,   
        "TWD": twd_exchange_rate    
    }

    base_currency = "USD"
    target_currencies = ["KRW", "JPY", "CNY", "TWD"]

    st.write("base_currency:", base_currency)
    amount = st.number_input("enter price", key="amount", min_value=0.01)

    st.write("choose target_currencies:")
    target_currency = st.selectbox("select currency", target_currencies, key="target_currency")

    converted_amount = amount * exchange[target_currency]
    st.write(f"{amount:.2f} {base_currency} = {converted_amount:.2f} {target_currency}")


    # 가로선 추가
    st.markdown("<hr>", unsafe_allow_html=True)

    st.title("Today's Exchange Rate")

    BASE_currency = "KRW"
    krw_exchange_rate = float(krw_exchange_rate)
    jpy_exchange_rate = float(jpy_exchange_rate)
    cny_exchange_rate = float(cny_exchange_rate)
    twd_exchange_rate = float(twd_exchange_rate)

    usd_exchange_rate = exchange_rates.get("USD")
    usd_exchange_rate = float(usd_exchange_rate)
    USD_currency = usd_exchange_rate/krw_exchange_rate

    if USD_currency is not None:
        USD_currency = float(USD_currency)
        # 문자열을 실수형으로 변환
        st.write(f"1 {BASE_currency} = {USD_currency:.4f} USD")
    else:
        st.write("USD의 환율 정보가 없습니다.")

    JPY_currency = jpy_exchange_rate/krw_exchange_rate

    if JPY_currency is not None:
        JPY_currency = float(JPY_currency)
        # 문자열을 실수형으로 변환
        st.write(f"1 {BASE_currency} = {JPY_currency:.4f} JPY")
    else:
        st.write("JPY의 환율 정보가 없습니다.")

    CNY_currency = cny_exchange_rate/krw_exchange_rate

    if CNY_currency is not None:
        CNY_currency = float(CNY_currency)
        # 문자열을 실수형으로 변환
        st.write(f"1 {BASE_currency} = {CNY_currency:.4f} CNY")
    else:
        st.write("CNY의 환율 정보가 없습니다.")

    TWD_currency = twd_exchange_rate/krw_exchange_rate

    if TWD_currency is not None:
        TWD_currency = float(TWD_currency)
        # 문자열을 실수형으로 변환
        st.write(f"1 {BASE_currency} = {TWD_currency:.4f} TWD")
    else:
        st.write("TWD의 환율 정보가 없습니다.")

    # 가로선 추가
    st.markdown("<hr>", unsafe_allow_html=True)

    st.title("Price info - 실시간 환율 정보 사용 (KRW 기준)")

    EXCHANGE = {
        "USD": USD_currency,  
        "JPY": JPY_currency,   
        "CNY": CNY_currency,   
        "TWD": TWD_currency   
    }

    BASE_currency = "KRW"
    target_currencies = ["USD", "JPY", "CNY", "TWD"]

    st.write("BASE_currency:", BASE_currency)
    BASE = st.number_input("enter price", key="BASE", min_value=0.01)

    st.write("choose target_currencies:")
    TARGET = st.selectbox("select currency", target_currencies, key="TARGET")

    converted_amount = BASE * EXCHANGE[TARGET]
    st.write(f"{BASE:.2f} {BASE_currency} = {converted_amount:.2f} {TARGET}")


# Main app
def main():
    st.set_page_config(page_title="YumScan", page_icon=":pizza:", layout="wide")
  
    navigation = st.sidebar.radio("YUMSCAN", ["🏠 Home", "🍔 Food Information", "🥗 Ingredients", "🚫 Allergen Information", "🌶️ Spiciness Level", "💱 Exchange Rates"], key="navigation")
    
    # Separator line
    st.sidebar.markdown("<div class='sidebar-separator'></div>", unsafe_allow_html=True)

    selected_language = st.sidebar.selectbox("Select Language", ["English", "Chinese", "Japanese"])
    
    if navigation == "🏠 Home":
        home_page()
    elif navigation == "🍔 Food Information":
        food_info_page()
    elif navigation == "🥗 Ingredients":
        Ingredients()
    elif navigation == "🚫 Allergen Information":
        allergen_page()
    elif navigation == "🌶️ Spiciness Level":
        spiciness_page()
    elif navigation == "💱 Exchange Rates":
        exchange_rate_page()

if __name__ == "__main__":
    main()
